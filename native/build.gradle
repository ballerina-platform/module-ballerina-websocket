/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'java'
    id 'checkstyle'
    id 'com.github.spotbugs'
}

description = 'Ballerina - Websocket Java Utils'

dependencies {
    checkstyle project(':checkstyle')
    checkstyle "com.puppycrawl.tools:checkstyle:${puppycrawlCheckstyleVersion}"

    implementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'value', version: "${ballerinaLangVersion}"

    implementation group: 'io.ballerina.stdlib', name: 'io-native', version: "${stdlibIoVersion}"
    implementation group: 'io.ballerina.stdlib', name: 'http-native', version: "${stdlibHttpVersion}"
    implementation group: 'io.ballerina.stdlib', name: 'constraint-native', version: "${stdlibConstraintVersion}"
    implementation group: 'io.ballerina.stdlib', name: 'mime-native', version: "${stdlibMimeVersion}"

    implementation group: 'org.slf4j', name: 'slf4j-jdk14', version: "${slf4jVersion}"

    // Transport related dependencies
    implementation group: 'io.netty', name: 'netty-handler-proxy', version:"${nettyVersion}"

    testImplementation group: 'com.mashape.unirest', name: 'unirest-java', version:"${unirestVersion}"
}

test {
    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
    testLogging.showStandardStreams = true
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
}

checkstyle {
    toolVersion '7.8.2'
    configFile rootProject.file("build-config/checkstyle/build/checkstyle.xml")
    configProperties = ["suppressionFile" : file("${rootDir}/build-config/checkstyle/build/suppressions.xml")]
}

def excludePattern = '**/module-info.java'
tasks.withType(Checkstyle) {
    exclude excludePattern
}

checkstyleMain.dependsOn(":checkstyle:downloadCheckstyleRuleFiles")

spotbugsMain {
    effort "max"
    reportLevel "low"
    reportsDir = file("$project.buildDir/reports/spotbugs")
    reports {
        html.enabled true
        text.enabled = true
    }
    def excludeFile = file('spotbugs-exclude.xml')
    if(excludeFile.exists()) {
        excludeFilter = excludeFile
    }
}

spotbugsTest {
    enabled = false
}


compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}
